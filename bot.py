# –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É bot.py –∏ models.py
from dotenv import load_dotenv
import os

load_dotenv()
TOKEN        = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_ID     = int(os.getenv("ADMIN_TELEGRAM_ID"))

# bot.py
import logging
from datetime import datetime, date, timedelta, time, timezone
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes,
    filters,
)
from models import SessionLocal, User, Event, Reminder

MSK = timezone(timedelta(hours=3))

from datetime import timedelta

async def test_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–æ —à–ª—ë—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É —Å–∞–º–æ–º—É —Å–µ–±–µ."""
    chat_id = update.effective_user.id
    context.application.job_queue.run_once(
        lambda ctx: context.bot.send_message(chat_id=chat_id, text="‚úÖ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!"),
        when=timedelta(minutes=1),
        name=f"test_{chat_id}"
    )
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.")


async def test_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = update.effective_user.id
    await context.bot.send_message(
        chat_id=me,
        text="‚úÖ –ï—Å–ª–∏ –≤—ã —ç—Ç–æ –≤–∏–¥–∏—Ç–µ ‚Äî –≤–∞—à –±–æ—Ç —É–º–µ–µ—Ç —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!"
    )


async def test_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    tg_id = update.effective_user.id
    user = session.query(User).filter_by(telegram_id=tg_id).first()
    if not user:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–î.")
        session.close()
        return

    bday = date.today() + timedelta(days=7)
    text = f"üéÇ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é ({bday.strftime('%d.%m.%Y')}) ‚Äî –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è **{user.full_name}**! üéâ"

    # –ü–æ—à–ª—ë–º —Ç–µ—Å—Ç–æ–≤–æ –∏ —Å–µ–±–µ
    await context.bot.send_message(chat_id=tg_id, text=text, parse_mode="Markdown")
    session.close()
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º!")




# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
REGISTER_NAME, REGISTER_POSITION, REGISTER_BIRTHDATE = range(3)
EVENT_TITLE, EVENT_DESC, EVENT_INTERVAL, EVENT_DATE, EVENT_USERS = range(3, 8)

# –î–æ–ª–∂–Ω–æ—Å—Ç–∏
POSITIONS = [
    "–∑–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä–æ–π", "–¥–æ—Ü–µ–Ω—Ç", "—Å—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
    "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä", "–∑–∞–≤–µ–¥—É—é—â–∏–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏",
]
# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
INTERVAL_OPTIONS = [
    ("–ö–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π", 7),
    ("–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è", 3),
    ("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å",     1),
]

def schedule_birthday_reminder(job_queue, user_id: int, birth_date: date):
    today = date.today()
    this_year_bday = date(today.year, birth_date.month, birth_date.day)
    if this_year_bday < today:
        next_bday = date(today.year + 1, birth_date.month, birth_date.day)
    else:
        next_bday = this_year_bday

    remind_date = next_bday - timedelta(days=7)
    run_dt = datetime.combine(remind_date, time(13, 0), MSK)
    if run_dt <= datetime.now(MSK):
        return

    job_id = f"bday_{user_id}_{next_bday.year}"
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    for job in job_queue.get_jobs_by_name(job_id):
        job.schedule_removal()

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    job_queue.run_once(
        send_birthday_reminder,
        when=run_dt,
        name=job_id,
        data={'user_id': user_id, 'bday': next_bday}
    )


async def send_birthday_reminder(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º, –∫—Ä–æ–º–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è¬ª.
    """
    job_data = context.job.data
    user_id = job_data['user_id']
    bday    = job_data['bday']  # –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, datetime.date

    session = SessionLocal()
    user = session.get(User, user_id)
    if not user:
        session.close()
        return

    # –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∫—Ä–æ–º–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞
    others = session.query(User).filter(User.id != user_id).all()
    text = (
        f"üéÇ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é ({bday.strftime('%d.%m.%Y')}) ‚Äî –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è **{user.full_name}**! üéâ"
    )
    for u in others:
        await context.bot.send_message(
            chat_id=u.telegram_id,
            text=text,
            parse_mode="Markdown"
        )
    session.close()



# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É—á—ë—Ç–æ–º is_admin
def build_main_menu(is_admin: bool):
    rows = [
        ["–°–æ–±—ã—Ç–∏—è", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"],
        ["–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "–°–ø—Ä–∞–≤–∫–∞"],
        ["–ú–µ–Ω—é"]
    ]
    if is_admin:
        rows.insert(1, ["–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# –ú–µ–Ω—é –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
REG_MENU = ReplyKeyboardMarkup(
    [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–°–æ–±—ã—Ç–∏—è"], ["–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "–°–ø—Ä–∞–≤–∫–∞"], ["–ú–µ–Ω—é"]],
    resize_keyboard=True
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s ‚Äî %(name)s ‚Äî %(levelname)s ‚Äî %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def register_user(tg_id, name, pos, bdate):
    session = SessionLocal()
    user = User(
        telegram_id=tg_id,
        full_name=name,
        position=pos,
        birth_date=bdate
    )
    session.add(user)
    session.commit()
    uid, full, position, bd, is_admin = (
        user.id, user.full_name, user.position, user.birth_date, user.is_admin
    )
    session.close()
    return uid, full, position, bd, is_admin

# /start –∏ –∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=tg_id).first()
    session.close()

    if user:
        menu = build_main_menu(user.is_admin)
        admin_line = "üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n" if user.is_admin else ""
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!\n"
            f"üÜî {user.id}\n"
            f"{admin_line}"
            f"üéì {user.position}\n"
            f"üéÇ {user.birth_date.strftime('%d.%m.%Y')}",
            reply_markup=menu
        )
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=REG_MENU)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
async def registration_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['full_name'] = update.message.text.strip()
    kb = [[pos] for pos in POSITIONS]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return REGISTER_POSITION

async def register_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pos = update.message.text.strip()
    if pos not in POSITIONS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return REGISTER_POSITION
    context.user_data['position'] = pos
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è DD.MM.YYYY:", reply_markup=ReplyKeyboardRemove())
    return REGISTER_BIRTHDATE

async def register_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    try:
        bdate = datetime.strptime(txt, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 01.08.2004")
        return REGISTER_BIRTHDATE

    tg_id = update.effective_user.id
    uid, full, pos, bd, is_admin = register_user(
        tg_id,
        context.user_data['full_name'],
        context.user_data['position'],
        bdate
    )

    menu = build_main_menu(is_admin)
    await update.message.reply_text("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üéâ")
    await update.message.reply_text(
        f"üÜî {uid}\n"
        f"{full}\n"
        f"üéì {pos}\n"
        f"üéÇ {bd.strftime('%d.%m.%Y')}",
        reply_markup=menu
    )

    schedule_birthday_reminder(
        context.application.job_queue,
        tg_id,  # –∏–ª–∏ user.id, –µ—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ–≥–æ –∏–∑ register_user
        bdate
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ---
async def event_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=ReplyKeyboardRemove())
    return EVENT_TITLE

async def event_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['evt_title'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    return EVENT_DESC

async def event_desc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['evt_desc'] = update.message.text.strip()
    kb = [[opt[0]] for opt in INTERVAL_OPTIONS]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return EVENT_INTERVAL

async def event_interval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text.strip()
    mapping = {opt[0]: opt[1] for opt in INTERVAL_OPTIONS}
    if choice not in mapping:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return EVENT_INTERVAL
    context.user_data['evt_interval'] = mapping[choice]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è DD.MM.YYYY:")
    return EVENT_DATE

async def event_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    try:
        evt_dt = datetime.strptime(txt, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 01.08.2025")
        return EVENT_DATE

    # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º
    if evt_dt < date.today():
        await update.message.reply_text("–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return EVENT_DATE

    context.user_data['evt_date'] = evt_dt

    session = SessionLocal()
    users = session.query(User).all()
    session.close()

    kb = [[u.full_name] for u in users] + [["–ì–æ—Ç–æ–≤–æ"]]
    context.user_data['evt_notify_list'] = []
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )
    return EVENT_USERS

def schedule_reminders(job_queue, event_id: int, interval: int):
    session = SessionLocal()
    evt = session.query(Event).get(event_id)
    session.close()

    today = date.today()
    run_date = today
    while run_date <= evt.event_date:
        # –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ run_date 13:00 –ú–°–ö
        run_dt = datetime.combine(run_date, time(13, 0), MSK)
        if run_dt >= datetime.now(MSK):
            job_queue.run_once(
                send_reminder,
                when=run_dt,
                data={'event_id': event_id, 'target_date': run_date}
            )
        run_date += timedelta(days=interval)

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    ev_id      = job_data['event_id']
    target_day = job_data['target_date']

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
    session = SessionLocal()
    evt = session.query(Event).get(ev_id)

    if evt and date.today() == target_day:
        for u in evt.recipients:
            try:
                await context.bot.send_message(
                    chat_id=u.telegram_id,
                    text=(
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ–±—ã—Ç–∏–µ ¬´{evt.title}¬ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ "
                        f"{evt.event_date.strftime('%d.%m.%Y')}.\n\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: ¬´{evt.description}¬ª"
                    ),
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {evt.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {u.id}: {e}")
                # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É:
                context.job_queue.run_once(
                    send_reminder,
                    when=timedelta(minutes=1),
                    data=job_data,
                    name=f"retry_{evt.id}_{u.id}"
                )
    session.close()


async def event_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "–ì–æ—Ç–æ–≤–æ":
        session = SessionLocal()
        creator = session.query(User).filter_by(telegram_id=update.effective_user.id).first()

        # 1) –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID
        evt = Event(
            title=context.user_data['evt_title'],
            description=context.user_data['evt_desc'],
            event_date=context.user_data['evt_date'],
            creator=creator
        )
        session.add(evt)
        session.commit()
        eid = evt.id

        # 2) –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –≤ –ë–î
        rem = Reminder(event=evt, interval_days=context.user_data['evt_interval'])
        session.add(rem)

        # 3) –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö chat_id
        recs = session.query(User).filter(User.full_name.in_(context.user_data['evt_notify_list'])).all()
        chat_ids = [u.telegram_id for u in recs]

        # 4) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∫ —Å–æ–±—ã—Ç–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë
        evt.recipients = recs
        session.commit()

        # 5) –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        title  = evt.title
        evdate = evt.event_date
        descr  = evt.description
        session.close()

        # 6) –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ JobQueue
        schedule_reminders(context.application.job_queue, eid, context.user_data['evt_interval'])

        await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
        await start(update, context)
        return ConversationHandler.END

    # –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    if text not in context.user_data['evt_notify_list']:
        context.user_data['evt_notify_list'].append(text)
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω: {text}")
    else:
        await update.message.reply_text(f"{text} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    return EVENT_USERS



# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ ---
async def manage_events(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    session = SessionLocal()
    tg_id = update.effective_user.id
    rows = (
        session.query(Event, User.full_name)
        .join(User, Event.creator)
        .filter(User.telegram_id == tg_id)
        .order_by(Event.event_date)
        .all()
    )
    session.close()

    if not rows:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.", reply_markup=build_main_menu(False))
        return

    text_lines = ["–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:"]
    buttons = []
    for evt, _ in rows:
        text_lines.append(f"‚Ä¢ {evt.title} ({evt.event_date.strftime('%d.%m.%Y')})")
        buttons.append([InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å ¬´{evt.title}¬ª", callback_data=f"delete_evt_{evt.id}")])

    await update.message.reply_text("\n".join(text_lines))
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(buttons))

async def delete_evt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    evt_id = int(query.data.split("_")[-1])

    session = SessionLocal()
    evt = session.query(Event).get(evt_id)
    if evt and evt.creator.telegram_id == query.from_user.id:
        session.delete(evt)
        session.commit()
    session.close()
    await query.edit_message_text("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

# --- –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π ---
async def events_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    session = SessionLocal()
    rows = (
        session.query(Event, User.full_name)
        .join(User, Event.creator)
        .order_by(Event.event_date)
        .all()
    )
    session.close()

    if not rows:
        await update.message.reply_text("–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=build_main_menu(False))
        return

    lines = []
    for idx, (evt, creator_name) in enumerate(rows, start=1):
        lines.append(
            f"{idx}. ¬´{evt.title}¬ª\n"
            f"   –î–∞—Ç–∞: {evt.event_date.strftime('%d.%m.%Y')}\n"
            f"   –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_name}"
        )
    text = "üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n\n" + "\n\n".join(lines)
    await update.message.reply_text(text, reply_markup=build_main_menu(False))

# --- –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
        [InlineKeyboardButton("üóì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏",   callback_data="manage_events_admin")],
    ]
    await update.message.reply_text(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
async def manage_users_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    session = SessionLocal()
    users = session.query(User).order_by(User.id).all()
    session.close()

    if not users:
        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    buttons = []
    for u in users:
        text += f"‚Ä¢ {u.id}: {u.full_name}  ({'–ê–î–ú–ò–ù' if u.is_admin else u.position})\n"
        buttons.append([
            InlineKeyboardButton("üîº –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"promote_{u.id}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å",           callback_data=f"delete_user_{u.id}")
        ])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))

async def promote_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[1])
    session = SessionLocal()
    u = session.query(User).get(user_id)
    if u:
        u.is_admin = True
        session.commit()
        await query.edit_message_text(f"‚úÖ {u.full_name} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    else:
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    session.close()

async def delete_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[2])
    session = SessionLocal()
    u = session.query(User).get(user_id)
    if u:
        session.delete(u)
        session.commit()
        await query.edit_message_text(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u.full_name} —É–¥–∞–ª—ë–Ω.")
    else:
        await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    session.close()

# --- –ê–¥–º–∏–Ω: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ ---
async def manage_events_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    session = SessionLocal()
    rows = (
        session.query(Event, User.full_name)
               .join(User, Event.creator)
               .order_by(Event.event_date)
               .all()
    )
    session.close()

    if not rows:
        await query.edit_message_text("–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text_lines = ["üóì –í—Å–µ —Å–æ–±—ã—Ç–∏—è:"]
    buttons = []
    for evt, creator_name in rows:
        text_lines.append(
            f"‚Ä¢ {evt.id}. ¬´{evt.title}¬ª ‚Äî {evt.event_date.strftime('%d.%m.%Y')} (—Å–æ–∑–¥–∞—Ç–µ–ª—å: {creator_name})"
        )
        buttons.append([
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_evt_{evt.id}")
        ])

    await query.edit_message_text(
        "\n".join(text_lines),
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def admin_delete_evt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    evt_id = int(query.data.split("_")[-1])

    session = SessionLocal()
    evt = session.query(Event).get(evt_id)
    if evt:
        title = evt.title
        session.delete(evt)
        session.commit()
        await query.edit_message_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{title}¬ª —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await query.edit_message_text("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    session.close()

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —Å–ø—Ä–∞–≤–∫–∏
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "üîπ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è* ‚Äî –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
        "üîπ *–°–æ–±—ã—Ç–∏—è* ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n"
        "üîπ *–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ* ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ—ë –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤—ã–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
        "üîπ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è.\n"
        "üîπ *–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è* ‚Äî –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –≤—Å–µ–º –æ –≤–∞—à–∏—Ö –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é.\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 13:00 –ú–°–ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É.\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ Markdown, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –ø—É–Ω–∫—Ç—ã
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=build_main_menu(False))


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–∞–∑–≥–æ–≤–æ—Ä—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏–π
    reg_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è$'), registration_start)],
        states={
            REGISTER_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            REGISTER_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_position)],
            REGISTER_BIRTHDATE:[MessageHandler(filters.TEXT & ~filters.COMMAND, register_birthdate)],
        },
        fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Regex('^–ú–µ–Ω—é$'), start)],
        allow_reentry=True,
    )
    evt_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ$'), event_start)],
        states={
            EVENT_TITLE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, event_title)],
            EVENT_DESC:      [MessageHandler(filters.TEXT & ~filters.COMMAND, event_desc)],
            EVENT_INTERVAL:  [MessageHandler(filters.TEXT & ~filters.COMMAND, event_interval)],
            EVENT_DATE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, event_date)],
            EVENT_USERS:     [MessageHandler(filters.TEXT & ~filters.COMMAND, event_users)],
        },
        fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Regex('^–ú–µ–Ω—é$'), start)],
        allow_reentry=True,
    )

    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex('^–ú–µ–Ω—é$'), start))
    app.add_handler(reg_conv)
    app.add_handler(evt_conv)
    app.add_handler(MessageHandler(filters.Regex('^–°–æ–±—ã—Ç–∏—è$'), events_list))
    app.add_handler(MessageHandler(filters.Regex('^–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏$'), manage_events))
    app.add_handler(CallbackQueryHandler(delete_evt_callback, pattern=r"^delete_evt_\d+$"))
    app.add_handler(MessageHandler(filters.Regex('^–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞$'), admin_panel))
    app.add_handler(CommandHandler("test_me", test_me))
    app.add_handler(CommandHandler("test_bday", test_birthday))
    app.add_handler(CommandHandler("test", test_notification))

    # Admin: users
    app.add_handler(CallbackQueryHandler(manage_users_callback,   pattern=r"^manage_users$"))
    app.add_handler(CallbackQueryHandler(promote_user_callback,   pattern=r"^promote_\d+$"))
    app.add_handler(CallbackQueryHandler(delete_user_callback,    pattern=r"^delete_user_\d+$"))

    # Admin: events
    app.add_handler(CallbackQueryHandler(manage_events_admin_callback, pattern=r"^manage_events_admin$"))
    app.add_handler(CallbackQueryHandler(admin_delete_evt_callback,     pattern=r"^admin_delete_evt_\d+$"))

    app.add_handler(MessageHandler(filters.Regex('^–°–ø—Ä–∞–≤–∫–∞$'), help_command))
    app.add_error_handler(error_handler)

    session = SessionLocal()
    for u in session.query(User).all():
        schedule_birthday_reminder(
            app.job_queue,
            u.id,
            u.birth_date
        )
    session.close()




    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()
